// <auto-generated />
using System;
using Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Db.Migrations
{
    [DbContext(typeof(DbCore))]
    [Migration("20190507032700_Products")]
    partial class Products
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Db.AppLog", b =>
                {
                    b.Property<int>("AppLogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Application");

                    b.Property<string>("Category");

                    b.Property<string>("Exception");

                    b.Property<byte>("Level");

                    b.Property<string>("Message");

                    b.Property<string>("MessageTemplate");

                    b.Property<string>("Properties")
                        .HasColumnType("xml");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("AppLogId");

                    b.ToTable("AppLog","log");
                });

            modelBuilder.Entity("Db.Catalog", b =>
                {
                    b.Property<int>("CatalogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("CatalogDesc")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasDefaultValue("");

                    b.Property<string>("CatalogName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("InternalName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(16)
                        .HasDefaultValue("");

                    b.Property<int>("StoreId");

                    b.HasKey("CatalogId");

                    b.HasIndex("StoreId");

                    b.ToTable("Catalog");
                });

            modelBuilder.Entity("Db.CatalogProduct", b =>
                {
                    b.Property<int>("CatalogProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CatalogId");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("ProductId");

                    b.Property<int>("SortOrder")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CatalogProductId");

                    b.HasIndex("CatalogId");

                    b.HasIndex("ProductId");

                    b.ToTable("CatalogProduct");
                });

            modelBuilder.Entity("Db.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content")
                        .IsRequired();

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasDefaultValue("");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasDefaultValue("");

                    b.HasKey("FileId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("Db.Message", b =>
                {
                    b.Property<int>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.HasKey("MessageId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("Db.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("ProductDesc")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasDefaultValue("");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("ProductRichDesc")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2048)
                        .HasDefaultValue("");

                    b.HasKey("ProductId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Db.ProductResource", b =>
                {
                    b.Property<int>("ProductResourceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("FileId");

                    b.Property<int>("ProductId");

                    b.Property<string>("ResourceInfo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasDefaultValue("");

                    b.Property<string>("ResourceName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("SortOrder");

                    b.HasKey("ProductResourceId");

                    b.HasIndex("FileId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductResource");
                });

            modelBuilder.Entity("Db.RequestLog", b =>
                {
                    b.Property<int>("RequestLogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("IP")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasDefaultValue("");

                    b.Property<string>("Location")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2048)
                        .HasDefaultValue("");

                    b.Property<string>("Referer")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2048)
                        .HasDefaultValue("");

                    b.Property<DateTime>("RequestBegin");

                    b.Property<string>("RequestContentType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasDefaultValue("");

                    b.Property<string>("RequestMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(64)
                        .HasDefaultValue("");

                    b.Property<int>("RequestSize");

                    b.Property<string>("RequestText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.Property<string>("ResponseContentType")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasDefaultValue("");

                    b.Property<decimal?>("ResponseMs")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int?>("ResponseSize");

                    b.Property<int?>("ResponseStatus");

                    b.Property<string>("ResponseText")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue("");

                    b.Property<int>("ResponseType")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("URL")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(2048)
                        .HasDefaultValue("");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(256)
                        .HasDefaultValue("");

                    b.HasKey("RequestLogId");

                    b.ToTable("RequestLog","log");
                });

            modelBuilder.Entity("Db.Store", b =>
                {
                    b.Property<int>("StoreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1024)
                        .HasDefaultValue("");

                    b.Property<int>("ImportantConfigId")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(7);

                    b.Property<string>("Owner")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(128)
                        .HasDefaultValue("");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("StoreId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("Db.Catalog", b =>
                {
                    b.HasOne("Db.Store", "Store")
                        .WithMany()
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Db.CatalogProduct", b =>
                {
                    b.HasOne("Db.Catalog", "Catalog")
                        .WithMany("CatalogProducts")
                        .HasForeignKey("CatalogId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Db.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Db.ProductResource", b =>
                {
                    b.HasOne("Db.File", "File")
                        .WithMany("ProductResources")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Db.Product", "Product")
                        .WithMany("ProductResources")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
